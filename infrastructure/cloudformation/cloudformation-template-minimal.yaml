AWSTemplateFormatVersion: '2010-09-09'
Description: 'GenAI Tweets Digest - Minimal Serverless Infrastructure'

Parameters:
  ProjectName:
    Type: String
    Default: genai-tweets-digest
    Description: Name of the project (used for resource naming)
  
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name
  
  TwitterBearerToken:
    Type: String
    NoEcho: true
    Description: Twitter API Bearer Token
  
  GeminiApiKey:
    Type: String
    NoEcho: true
    Description: Google Gemini API Key
  
  FromEmail:
    Type: String
    Default: digest@genai-tweets.com
    Description: Email address for sending digests (must be verified in SES)

Resources:
  # S3 Bucket for data storage
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-data-${Environment}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # DynamoDB table for subscribers
  SubscribersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-subscribers-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: subscriber_id
          AttributeType: S
      KeySchema:
        - AttributeName: subscriber_id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-lambda-role-${Environment}-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: !GetAtt SubscribersTable.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub "arn:aws:s3:::${DataBucket}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt DataBucket.Arn
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  # Subscription Lambda Function
  SubscriptionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-subscription-${Environment}"
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder - deploy actual code'}
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          S3_BUCKET: !Ref DataBucket
          SUBSCRIBERS_TABLE: !Ref SubscribersTable
      Timeout: 30
      MemorySize: 256

  # Weekly Digest Lambda Function
  WeeklyDigestFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-weekly-digest-${Environment}"
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder - deploy actual code'}
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          TWITTER_BEARER_TOKEN: !Ref TwitterBearerToken
          GEMINI_API_KEY: !Ref GeminiApiKey
          S3_BUCKET: !Ref DataBucket
          SUBSCRIBERS_TABLE: !Ref SubscribersTable
          FROM_EMAIL: !Ref FromEmail
      Timeout: 900  # 15 minutes
      MemorySize: 1024

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${ProjectName}-api-${Environment}"
      Description: API for GenAI Tweets Digest
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource for subscription
  SubscriptionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: subscribe

  # API Gateway Method for subscription
  SubscriptionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SubscriptionResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubscriptionFunction.Arn}/invocations"

  # Lambda permission for API Gateway
  SubscriptionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SubscriptionFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - SubscriptionMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # EventBridge rule for weekly digest
  WeeklyDigestSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-weekly-schedule-${Environment}"
      Description: Trigger weekly digest generation
      ScheduleExpression: "cron(0 9 ? * SUN *)"  # Every Sunday at 9 AM UTC
      State: ENABLED
      Targets:
        - Arn: !GetAtt WeeklyDigestFunction.Arn
          Id: WeeklyDigestTarget

  # Lambda permission for EventBridge
  WeeklyDigestLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WeeklyDigestFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WeeklyDigestSchedule.Arn

Outputs:
  ApiGatewayURL:
    Description: URL of the API Gateway
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${ProjectName}-api-url-${Environment}"

  SubscriptionEndpoint:
    Description: Subscription API endpoint
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/subscribe"
    Export:
      Name: !Sub "${ProjectName}-subscription-endpoint-${Environment}"

  DataBucketName:
    Description: Name of the S3 bucket for data storage
    Value: !Ref DataBucket
    Export:
      Name: !Sub "${ProjectName}-data-bucket-${Environment}"

  SubscribersTableName:
    Description: Name of the DynamoDB table for subscribers
    Value: !Ref SubscribersTable
    Export:
      Name: !Sub "${ProjectName}-subscribers-table-${Environment}" 